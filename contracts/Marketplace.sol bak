pragma solidity ^0.4.24;

//import "./StoreLogic.sol";
import "./Store.sol";
//import "./MarketplaceLogic";

contract Marketplace is
MarketplaceLogic
{

    constructor()
    public
    //isNotAContract()
    MarketplaceLogic()
    {
    }

    function addAdmin (address user)
    public
    {
      super.addAdmin (user);
    }

    function deleteAdmin (address user)
    public
    {
      super.deleteAdmin (user);
    }

    function addAprovedStoreOwner (address user)
    public
    {
      super.addAprovedStoreOwner(user);
    }

    function deleteApprovedStoredOwner (address user)
    public
    {
      super.deleteApprovedStoredOwner(user);
    }

    function getUserRole(address user)
    public
    view
    returns (uint256)
    {
      return (super.getUserRole(user));
    }

    function userExists (address user, RoleChoices role)
    public
    view
    returns(bool)
    {
      return (super.userExists(user, role));
    }

    function getStoresNum ()
    public
    view
    returns(uint)
    {
      return (super.getStoresNum());
    }

    function getStores ()
    public
    view
    returns (address [] stores, bytes32[] names)
    {
      (stores, names) = super.getStores();
    }

    function createStore(bytes32 name)
    public
    returns (address)
    {
      return (super.createStoreLogic(name));
    }

    //TBD RAF delete store

    // Fallback function - Called if other functions don't match call or
    // sent ether without data
    // Typically, called when invalid data is sent
    // Added so ether sent to this contract is reverted if the contract fails
    // otherwise, the sender's money is transferred to contract
    function () public {
      revert();
    }
}
